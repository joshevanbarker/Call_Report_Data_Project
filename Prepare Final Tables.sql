-- Josh Barker 
-- Call Report Data Project

--Now that the Call Report data is already in staging tables, it is time to make it fit for use.
DROP TABLE IF EXISTS institutions;
DROP TABLE IF EXISTS call_data_long;
DROP TABLE IF EXISTS schedule_ri;
DROP TABLE IF EXISTS schedule_rc_031;
DROP TABLE IF EXISTS schedule_rc_041_51;
DROP TABLE IF EXISTS schedule_rcn_031;
DROP TABLE IF EXISTS schedule_rcn_041_51;


--First, we'll separate out the institutions' information from the main data
--Since some institutions have changed names and addresses, but this doesn't concern our analysis much, we'll keep the RSSD (which remains constant) and ignore the past names and addresses and keep attached to the RSSD the most recent filing type.
CREATE TABLE institutions AS
SELECT DISTINCT a.ID_RSSD, a.INST_NAME, a.INST_ADDRESS, a.INST_CITY, a.INST_STATE, a.INST_ZIP, 
b.first_dt, b.last_dt, a.FDIC_CERTIFICATE, a.OCC_CHARTER, a.OTS_DOCKET, a.ROUTING_NUMBER, c.filing_type
FROM (SELECT ID_RSSD, INST_NAME, INST_ADDRESS, INST_CITY, INST_STATE, INST_ZIP, FDIC_CERTIFICATE,
		OCC_CHARTER, OTS_DOCKET, ROUTING_NUMBER FROM (SELECT ID_RSSD, INST_NAME, INST_ADDRESS, INST_CITY, INST_STATE, INST_ZIP, FDIC_CERTIFICATE,
		OCC_CHARTER, OTS_DOCKET, ROUTING_NUMBER, 
		ROW_NUMBER() OVER (PARTITION BY ID_RSSD ORDER BY as_of_dt DESC) AS row_number FROM raw_call_data_part_1
		) WHERE row_number = 1) AS a
LEFT JOIN (
	SELECT ID_RSSD, min(as_of_dt) AS first_dt, max(as_of_dt) as last_dt FROM raw_call_data_part_1 
	GROUP BY ID_RSSD
) AS b USING (ID_RSSD)
LEFT JOIN (
	SELECT ID_RSSD, filing_type, as_of_dt FROM raw_call_data_part_1
) AS c ON a.ID_RSSD = c.ID_RSSD AND b.last_dt = c.as_of_dt;

--Next we'll create a table with long data for easier analysis
--PostgreSQL does not have the UNPIVOT function, so we will use CROSS JOIN LATERAL that will make JSON of each MDRM and its value for each institution and as-of date, maintaining the filing status with each row for ease of analysis.

CREATE TABLE call_data_long AS
SELECT a.as_of_dt, a.id_rssd, a.filing_type, b.mdrm, b.amount 
FROM raw_call_data_part_1 a
	CROSS JOIN LATERAL jsonb_each_text(to_jsonb(a) - 'as_of_dt' - 'id_rssd' - 'fdic_certificate' - 'occ_charter' - 'ots_docket'
	- 'routing_number' - 'inst_name' - 'inst_address' - 'inst_city' - 'inst_state' - 'inst_zip' - 'filing_type' - 'submission_d_dt') as b(mdrm, amount)
UNION ALL -- using UNION ALL will be faster than UNION, but risks giving us duplicates, if the same MDRM exists on both tables
SELECT c.as_of_dt, c.id_rssd, c.filing_type, d.mdrm, d.amount 
FROM raw_call_data_part_2 c
	CROSS JOIN LATERAL jsonb_each_text(to_jsonb(c) - 'as_of_dt' - 'id_rssd' - 'fdic_certificate' - 'occ_charter' - 'ots_docket'
	- 'routing_number' - 'inst_name' - 'inst_address' - 'inst_city' - 'inst_state' - 'inst_zip' - 'filing_type' - 'submission_d_dt') as d(mdrm, amount);

-- To ensure that we didn't miss any duplicates, let's check. Our goal is no results here. 
SELECT id_rssd, as_of_dt, mdrm, COUNT(*) AS duplicate_count
FROM call_data_long
GROUP BY id_rssd, as_of_dt, mdrm
HAVING COUNT(*) > 1;

-- Now, we'll create a table for each of the three schedules represented in this dataset
-- We'll have to hard-code which MDRMs belong to which schedule
CREATE TABLE schedule_ri AS
SELECT id_rssd, as_of_dt, filing_type, RIAD4435, RIAD4436, RIAD4024, RIAD4012,
RIADB485, RIADB486, RIAD4056, RIADB487, RIAD4058, RIAD4059, RIAD4010, RIAD4065, 
RIAD4115, RIADB488, RIADB489, RIAD4060, RIAD4069, RIAD4020, RIAD4518, RIAD4107, 
RIAD4508, RIAD0093, RIADHK03, RIADHK04, RIAD4172, RIAD4180, RIADGW44, RIAD4185, 
RIAD4200, RIAD4073, RIAD4074, RIADJJ33, RIAD4070, RIAD4080, RIADA220, RIADC886, 
RIADC888, RIADC887, RIADC386, RIADC387, RIADHT73, RIADHT74, RIADB491, RIADB492, 
RIADB493, RIAD5416, RIAD5415, RIADB496, RIADB497, RIAD4079, RIAD3521, RIAD3196, 
RIAD4135, RIAD4217, RIADC216, RIADC232, RIAD4092, RIAD4093, RIADHT69, RIADHT70, 
RIAD4301, RIAD4302, RIAD4300, RIADFT28, RIADG104, RIADG103, RIAD4340, RIAD4513, 
RIAD8431, RIAD4313, RIAD4507, RIAD4150, RIAD9106, RIAD8757, RIAD8758, RIAD8759, 
RIAD8760, RIADF186, RIADFT36, RIADFT37, RIADFT38, RIADFT39, RIADFT40, RIADC889, 
RIADC890, RIADA251, RIADA530, RIADF228, RIADF551, RIADF552, RIADF553, RIADF554, 
RIADJ321, RIADH032, RIADH033, RIADH034, RIADH035 FROM raw_call_data_part_2;

CREATE TABLE schedule_rc_031 AS
SELECT id_rssd, as_of_dt, filing_type, RCFD0081, RCFD0071, RCFDJJ34, RCFD1773, RCFDJA22, RCONB987, RCFDB989,
RCFD5369, RCFDB528, RCFD3123, RCFDB529, RCFD3545, RCFD2145, RCFD2150, RCFD2130, RCFD3656, RCFD2143, RCFD2160, 
RCFD2170, RCON2200, RCON6631, RCON6636, RCFN2200, RCFN6631, RCFN6636, RCONB993, RCFDB995, RCFD3548, RCFD3190, 
RCFD3200, RCFD2930, RCFD2948, RCFD3838, RCFD3230, RCFD3839, RCFD3632, RCFDB530, RCFDA130, RCFD3210, RCFD3000, 
RCFDG105, RCFD3300, RCFD6724, RCON8678
FROM raw_call_data_part_1
WHERE filing_type = '31';

CREATE TABLE schedule_rc_041_51 AS
SELECT a.id_rssd, a.as_of_dt, a.filing_type, RCON0081, RCON0071, RCONJJ34, RCON1773, RCONJA22, RCONB987, RCONB989,
RCON5369, RCONB528, RCON3123, RCONB529, RCON3545, RCON2145, RCON2150, RCON2130, RCON3656, RCON2143, RCON2160, 
RCON2170, RCON2200, RCON6631, RCON6636, RCONB993, RCONB995, RCON3548, RCON3190, 
RCON3200, RCON2930, RCON2948, RCON3838, RCON3230, RCON3839, RCON3632, RCONB530, RCONA130, RCON3210, RCON3000, 
RCONG105, RCON3300, RCON6724, RCON8678
FROM raw_call_data_part_1 a INNER JOIN raw_call_data_part_2 b USING (id_rssd, as_of_dt)
WHERE a.filing_type != '31';

CREATE TABLE schedule_rcn_031 AS
SELECT a.id_rssd, a.as_of_dt, a.filing_type, RCONF172, RCONF174, RCONF176, RCONF173, RCONF175, RCONF177,
RCON3493, RCON3494, RCON3495, RCON5398, RCON5399, RCON5400, RCONC236, RCONC237, RCONC229, RCONC238, 
RCONC239, RCONC230, RCON3499, RCON3500, RCON3501, RCONF178, RCONF180, RCONF182, RCONF179, RCONF181, RCONF183, 
RCFNB572, RCFNB573, RCFNB574, RCFD5377, RCFD5378, RCFD5379, RCFD5380, RCFD5381, RCFD5382, RCFD1594, RCFD1597, 
RCFD1583, RCFD1251, RCFD1252, RCFD1253, RCFD1254, RCFD1255, RCFD1256, RCFDB575, RCFDB576, RCFDB577, RCFDK213, 
RCFDK214, RCFDK215, RCFDK216, RCFDK217, RCFDK218, RCFD5389, RCFD5390, RCFD5391, RCFD5459, RCFD5460, RCFD5461, 
RCFDF166, RCFDF167, RCFDF168, RCFDF169, RCFDF170, RCFDF171, RCFD1406, RCFD1407, RCFD1403, RCFD3505, RCFD3506, 
RCFD3507, RCFDK036, RCFDK037, RCFDK038, RCFDK039, RCFDK040, RCFDK041, RCFDK042, RCFDK043, RCFDK044, RCONK045,
RCONK046, RCONK047, RCONK048, RCONK049, RCONK050, RCONK051, RCONK052, RCONK053, RCONK054, RCONK055, RCONK056, 
RCONK057, RCONK058, RCONK059, RCONK060, RCONK061, RCONK062, RCONK063, RCONK064, RCONK065, RCONK066, RCONK067, 
RCONK068, RCONK069, RCONK070, RCONK071, RCFDK087, RCFDK088, RCFDK089, RCFDK102, RCFDK103, RCFDK104, RCONK105, 
RCONK106, RCONK107, RCONK108, RCONK109, RCONK110, RCONF661, RCONF662, RCONF663, RCONK111, RCONK112, RCONK113, 
RCONK114, RCONK115, RCONK116, RCONK117, RCONK118, RCONK119, RCFDK120, RCFDK121, RCFDK122, RCFDK123, RCFDK124, 
RCFDK125, RCFDK126, RCFDK127, RCFDK128, RCONK130, RCONK131, RCONK132, RCFDK138, RCFDK139, RCFDK140, RCFDK274, 
RCFDK275, RCFDK276, RCFDK277, RCFDK278, RCFDK279, RCFDK280, RCFDK281, RCFDK282, RCFDHK26, RCFDHK27, RCFDHK28, 
RCFD6558, RCFD6559, RCFD6560, RCFD1248, RCFD1249, RCFD1250, RCFDC240, RCFDC241, RCFDC226, RCFD3529, RCFD3530, 
RCFDC410, RCFDC411, RCFDL183, RCFDL184, RCFDL185, RCFDL186, RCFDL187, RCFDL188 
FROM raw_call_data_part_1 a
INNER JOIN raw_call_data_part_2 b USING (id_rssd, as_of_dt)
WHERE a.filing_type = '31';

CREATE TABLE schedule_rcn_041_51 AS
SELECT a.id_rssd, a.as_of_dt, a.filing_type, RCONF172, RCONF174, RCONF176, RCONF173, RCONF175, RCONF177,
RCON3493, RCON3494, RCON3495, RCON5398, RCON5399, RCON5400, RCONC236, RCONC237, RCONC229, RCONC238, 
RCONC239, RCONC230, RCON3499, RCON3500, RCON3501, RCONF178, RCONF180, RCONF182, RCONF179, RCONF181, RCONF183, 
RCONB834, RCONB835, RCONB836, RCON1606, RCON1607, RCON1608, RCONB575, RCONB576, RCONB577, RCONK213, RCONK214, 
RCONK215, RCONK216, RCONK217, RCONK218, RCON5459, RCON5460, RCON5461, RCON1226, RCON1227, RCON1228, RCON1406,
RCON1407, RCON1403, RCON3505, RCON3506, RCON3507, RCONK036, RCONK037, RCONK038, RCONK039, RCONK040, RCONK041, 
RCONK042, RCONK043, RCONK044, RCONK045, RCONK046, RCONK047, RCONK048, RCONK049, RCONK050, RCONK051, RCONK052,
RCONK053, RCONK054, RCONK055, RCONK056, RCONK057, RCONK058, RCONK059, RCONK060, RCONK061, RCONK062, RCONK063, 
RCONK064, RCONK065, RCONK066, RCONK067, RCONK068, RCONK069, RCONK070, RCONK071, RCONK087, RCONK088, RCONK089, 
RCONK102, RCONK103, RCONK104, RCONK105, RCONK106, RCONK107, RCONK108, RCONK109, RCONK110, RCONF661, RCONF662, 
RCONF663, RCONK111, RCONK112, RCONK113, RCONK114, RCONK115, RCONK116, RCONK117, RCONK118, RCONK119, RCONK257, 
RCONK258, RCONK259, RCONK120, RCONK121, RCONK122, RCONK123, RCONK124, RCONK125, RCONK126, RCONK127, RCONK128, 
RCONK130, RCONK131, RCONK132, RCONK274, RCONK275, RCONK276, RCONK277, RCONK278, RCONK279, RCONK280, RCONK281, 
RCONK282, RCONK138, RCONK139, RCONK140, RCONHK26, RCONHK27, RCONHK28, RCON6558, RCON6559, RCON6560, RCON1248, 
RCON1249, RCON1250, RCON5380, RCON5381, RCON5382, RCON1254, RCON1255, RCON1256, RCONF166, RCONF167, RCONF168, 
RCON1594, RCON1597, RCON1583, RCONC240, RCONC241, RCONC226, RCONC410, RCONC411, RCONL183, RCONL184, RCONL185, 
RCONL186, RCONL187, RCONL188 FROM raw_call_data_part_1 a
INNER JOIN raw_call_data_part_2 b USING (id_rssd, as_of_dt)
WHERE a.filing_type != '31';

-- Let's check to ensure that we did not miss any MDRM columns in hardcoding which columns go in which schedules
SELECT a.column_name, a.amount, description
FROM (SELECT column_name, count(column_name) as amount 
		FROM information_schema.columns 
		GROUP BY column_name
		HAVING count(column_name) = 1) as a
LEFT JOIN (SELECT * FROM mdrm_descriptions) as b ON UPPER(a.column_name) = b.mdrm
WHERE description IS NOT NULL;

-- We don't need rows containing only null values, especially since most of these are not because the MDRM is not relevant to the filer
-- So we will remove the null rows.
DELETE FROM call_data_long
WHERE amount IS NULL

--We will add the raw table number where each MDRM can be found as a column to mdrm_descriptions for ease of querying
ALTER TABLE mdrm_descriptions
ADD COLUMN table_name varchar(20);

UPDATE mdrm_descriptions AS a
SET table_name = b.table_name FROM information_schema.columns b
WHERE a.mdrm = UPPER(b.column_name)
AND b.table_name IN ('raw_call_data_part_1', 'raw_call_data_part_2');